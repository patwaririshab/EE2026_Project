`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// National University of Singapore
// Department of Electrical and Computer Engineering
// EE2026 Digital Design
// AY1819 Semester 1
// Project: Voice Scope
//////////////////////////////////////////////////////////////////////////////////

module Voice_Scope_TOP(
    input CLK,
    
    input switch,
    input pause_switch,
    input grid_switch,
    input tick_switch,
    input axes_switch,
    input wave_switch,
    
    input middle_button,
    input left_button,
    input right_button,
    input up_button,
    input down_button,
    
    input  J_MIC3_Pin3,   // PmodMIC3 audio input data (serial)
    output J_MIC3_Pin1,   // PmodMIC3 chip select, 20kHz sampling clock
    output J_MIC3_Pin4,   // PmodMIC3 serial clock (generated by module VoiceCapturer.v)
   
    output [3:0] VGA_RED,    // RGB outputs to VGA connector (4 bits per channel gives 4096 possible colors)
    output [3:0] VGA_GREEN,
    output [3:0] VGA_BLUE,
    
    output VGA_VS,          // horizontal & vertical sync outputs to VGA connector
    output VGA_HS,
    output [11:0] led,
    output [3:0] an,
    output [7:0] seg
    );
    
    // 20 KILO Hz clock divider
    wire freq_20hz;
    clk_div my_20khz (CLK, freq_20hz);
    
    // Used to store 12-bit mic inputs.
    wire [11:0] sound_sample;
    wire [11:0] block_sample;
    
    // Generates actual mic waveform
    Voice_Capturer vc1 (CLK, freq_20hz,J_MIC3_Pin3, J_MIC3_Pin1, J_MIC3_Pin4,sound_sample);
    // Controls LED Indicator
    Volume_Indicator vi (CLK, sound_sample, block_sample, an, seg);
    assign led[11:0] = block_sample[11:0];
    
    // Single pulse button handling
    wire left_button_out;
    wire right_button_out;
    wire middle_button_out;
    wire up_button_out;
    wire down_button_out;
    wire button_clock;
    generate_button_clock gbc (CLK, button_clock);
    single_pulse lbut (button_clock, left_button, left_button_out);
    single_pulse rbut (button_clock, right_button, right_button_out);
    single_pulse mbut (button_clock, middle_button, middle_button_out);
    single_pulse ubut (button_clock, up_button, up_button_out);
    single_pulse dbut (button_clock, down_button, down_button_out);
    
    // Changes mode
    wire [1:0] mode;
    mode_changer mc (button_clock, up_button_out, down_button_out, mode);
    // Changing theme
    wire [11:0] cur_theme_wave;
    wire [11:0] cur_theme_axes;
    wire [11:0] cur_theme_grid;
    wire [11:0] cur_theme_tick;
    wire [11:0] cur_theme_background;
    theme_selector ts (button_clock, left_button_out, right_button_out, cur_theme_wave, cur_theme_axes,
        cur_theme_grid, cur_theme_tick, cur_theme_background, mode);
    
    
    
    // Generates test waveform 
    wire [9:0] wave_sample; 
    TestWave_Gen tvg (freq_20hz, wave_sample, sound_sample, pause_switch, mode);
    // Controls whether the test waveform or actual waveform is drawn.
    wire [9:0] draw_sound;
    assign draw_sound[9:0] = (switch) ? sound_sample[11:2] : wave_sample[9:0];
    
    /* MODE 1 - WAVEFORM */
    // Draws background
    wire [11:0] VGA_HORZ_COORD;
    wire [11:0] VGA_VERT_COORD;     
    wire [3:0] VGA_Red_waveform;
    wire [3:0] VGA_Green_waveform;
    wire [3:0] VGA_Blue_waveform;
    Draw_Waveform dw1 (freq_20hz, draw_sound, VGA_HORZ_COORD, VGA_VERT_COORD, 
        VGA_Red_waveform, VGA_Green_waveform, VGA_Blue_waveform, wave_switch,
        pause_switch, cur_theme_wave, cur_theme_background); 
    // Draws background
    wire [3:0] VGA_Red_grid;
    wire [3:0] VGA_Green_grid;
    wire [3:0] VGA_Blue_grid;
    Draw_Background db1 (VGA_HORZ_COORD, VGA_VERT_COORD, VGA_Red_grid, VGA_Green_grid, 
        VGA_Blue_grid, grid_switch, tick_switch, axes_switch, cur_theme_axes,
        cur_theme_grid, cur_theme_tick, cur_theme_background);
    // Draws text
    wire CLK_VGA;
    wire [3:0] VGA_red_text;
    wire [3:0] VGA_green_text;
    wire [3:0] VGA_blue_text;
    draw_text dt1 (CLK_VGA, button_clock, VGA_red_text, VGA_green_text, VGA_blue_text,
        VGA_HORZ_COORD, VGA_VERT_COORD, middle_button_out,
        cur_theme_wave, cur_theme_background, mode);
    
    /* MODE 2 - GAME */
    wire [3:0] VGA_game_red_back;
    wire [3:0] VGA_game_green_back;
    wire [3:0] VGA_game_blue_back;
    draw_game_background dgb (CLK_VGA, VGA_HORZ_COORD, VGA_VERT_COORD,
        VGA_game_red_back, VGA_game_green_back, VGA_game_blue_back);
    // Module with info text
    wire [3:0] VGA_game_red_text;
    wire [3:0] VGA_game_green_text;
    wire [3:0] VGA_game_blue_text;
    game_record_text grt (CLK_VGA, button_clock, VGA_HORZ_COORD, VGA_VERT_COORD,
        VGA_game_red_text, VGA_game_green_text, VGA_game_blue_text, middle_button_out, mode);
    // Module with background including HP bar, ball, 
    // Module with waveform being drawn to show recording being done
    // Module with volume indicator to show how high you can jump
    
    /* MODE 3 - MUSIC VISUALISER WITH AUTO GAIN?! IDK */
    
    // Do not touch - VGA controller    
    VGA_DISPLAY (CLK, VGA_Red_waveform, VGA_Green_waveform, VGA_Blue_waveform, 
        VGA_Red_grid, VGA_Green_grid, VGA_Blue_grid,
        VGA_red_text, VGA_green_text, VGA_blue_text,
        VGA_HORZ_COORD, VGA_VERT_COORD, 
        VGA_RED, VGA_GREEN, VGA_BLUE, VGA_VS, VGA_HS, CLK_VGA, mode,
        VGA_game_red_back, VGA_game_green_back, VGA_game_blue_back,
        VGA_game_red_text, VGA_game_green_text, VGA_game_blue_text);                  
endmodule
