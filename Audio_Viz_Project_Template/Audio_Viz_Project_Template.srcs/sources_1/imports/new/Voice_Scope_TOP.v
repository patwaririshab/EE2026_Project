`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// National University of Singapore
// Department of Electrical and Computer Engineering
// EE2026 Digital Design
// AY1819 Semester 1
// Project: Voice Scope
//////////////////////////////////////////////////////////////////////////////////

module Voice_Scope_TOP(
    input CLK,
    
    input switch,
    input  J_MIC3_Pin3,   // PmodMIC3 audio input data (serial)
    output J_MIC3_Pin1,   // PmodMIC3 chip select, 20kHz sampling clock
    output J_MIC3_Pin4,   // PmodMIC3 serial clock (generated by module VoiceCapturer.v)
   
    output [3:0] VGA_RED,    // RGB outputs to VGA connector (4 bits per channel gives 4096 possible colors)
    output [3:0] VGA_GREEN,
    output [3:0] VGA_BLUE,
    
    output VGA_VS,          // horizontal & vertical sync outputs to VGA connector
    output VGA_HS,
    output [11:0] led,
    output [3:0] an,
    output [7:0] seg
    );
       
   
      
       
//-----------------------------------------------------------------------------
//                  STUDENT A - MIC
//-----------------------------------------------------------------------------

       
       
    
// Please create a clock divider module to generate a 20kHz clock signal. 
// Instantiate it below
wire freq_20hz;
clk_div my_20khz (CLK, freq_20hz);
   
wire [11:0] sound_sample;
wire [11:0] block_sample;
// Please instantiate the voice capturer module below
Voice_Capturer vc1 (CLK, freq_20hz,J_MIC3_Pin3, J_MIC3_Pin1, J_MIC3_Pin4,sound_sample);
Volume_Indicator vi (CLK, sound_sample, block_sample, an, seg);

assign led[11:0] = block_sample[11:0];
//-----------------------------------------------------------------------------
//                  STUDENT B - VGA
//-----------------------------------------------------------------------------

    wire [11:0] VGA_HORZ_COORD;
    wire [11:0] VGA_VERT_COORD; 
    
// Please instantiate the waveform drawer module below
    
    wire [3:0] VGA_Red_waveform;
    wire [3:0] VGA_Green_waveform;
    wire [3:0] VGA_Blue_waveform;
    wire [9:0] wave_sample; 
    
    TestWave_Gen tvg (freq_20hz, wave_sample, sound_sample);
    wire [9:0] draw_sound;
    assign draw_sound[9:0] = (switch) ? sound_sample[11:2] : wave_sample[9:0];
    
    Draw_Waveform dw (freq_20hz, draw_sound, VGA_HORZ_COORD, VGA_VERT_COORD, VGA_Red_waveform, VGA_Green_waveform, VGA_Blue_waveform);
// Please instantiate the background drawing module below   
    wire [3:0] VGA_Red_grid;
    wire [3:0] VGA_Green_grid;
    wire [3:0] VGA_Blue_grid;
    
    Draw_Background db (VGA_HORZ_COORD, VGA_VERT_COORD, VGA_Red_grid, VGA_Green_grid, VGA_Blue_grid);
   
    
// Please instantiate the VGA display module below     
    
    VGA_DISPLAY (CLK, VGA_Red_waveform, VGA_Green_waveform, VGA_Blue_waveform, VGA_Red_grid, VGA_Green_grid, VGA_Blue_grid, VGA_HORZ_COORD, VGA_VERT_COORD, VGA_RED, VGA_GREEN,VGA_BLUE, VGA_VS, VGA_HS);
                    
endmodule
